module flow

control-flow rules

root Root(s) = start -> s -> end

Assign(n, e) =
  entry -> e -> this -> exit

Skip() = entry -> exit

Seq(s1, s2) = entry -> s1 -> s2 -> exit

IfThenElse(c, t, e) =
  entry -> node c -> t -> exit,
           node c -> e -> exit

While(e, s) =
  entry -> node e -> s -> node e -> exit

BinOp(_, e1, e2) =
  entry -> e1 -> e2 -> this -> exit

UnOp(_, e) =
  entry -> e -> this -> exit

node Int(_)
node True()
node False()

properties

definition: MaySet(name * Option(index))

property rules

definition(prev -> this@Assign(n, e)) =
  { (n, Some(indexOf(this))) } \/
  { (m, l) | (m, l) <- definition(prev), m != n }

definition(prev -> _) = definition(prev)

//definition(Root(_).start) = { (n, None()) | n <- live(start) }

//prop usesDef: Set index
//
//usesDef(this@Ref(n)) =
//  { opt | (m, opt) <- definition(this), n == m, opt != None() }
