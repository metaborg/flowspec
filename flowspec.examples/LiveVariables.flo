module flow

control-flow rules

Root(s) = entry -> s -> exit

this@Assign(n, e) =
  entry -> e -> this -> exit

Skip() = entry -> exit

Seq(s1,s2) = entry -> s1 -> s2 -> exit

IfThenElse(c, t, e) =
  entry -> node c -> t -> exit, 
           node c -> e -> exit

While(e, s) =
  entry -> node e -> s -> node e -> exit

properties

live: MaySet(name)

property rules

live(_.end) = {}

live(Ref(n) -> next) = live(next) \/ {n}

live(Assign(n, e) -> next) = { m | m <- live(next), n != m }

live(_ -> next) = live(next)
