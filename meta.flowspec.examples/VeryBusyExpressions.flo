module flow

cfg Root(s) = entry -> cfg s -> exit

cfg this@Assign(n, e) =
  entry -> cfg e -> this -> exit

cfg Skip() = entry -> exit

cfg Seq(s1,s2) = entry -> cfg s1 -> cfg s2 -> exit

cfg IfThenElse(c, t, e) =
  entry -> c -> cfg t -> exit,
           c -> cfg e -> exit

cfg While(e, s) =
  entry -> e -> cfg s -> e -> exit

prop read: Set(name)

read(this@BinOp(l,_,r)) = read(l) \/ read(r)
read(this@UnOp(_,e)) = read(e)
read(Ref(n)) = {n}
read(Literal(_)) = {}

prop expr: Set(term)

expr(this@BinOp(l,_,r)) = {this} \/ expr(l) \/ expr(r)
expr(this@UnOp(_,e)) = {this} \/ expr(e)
expr(Ref(_)) = {}
expr(Literal(_)) = {}

prop veryBusy: MustSet(term)

veryBusy(Assign(n, e) -> next) =
  { expr |
    expr <- veryBusy(next) \/ expr(e),
    !(n in read(expr)) }

veryBusy(_ -> next) = veryBusy(next)