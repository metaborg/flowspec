module flow

cfg Root(s) = entry -> cfg s -> exit

cfg this@Assign(n, e) =
  entry -> cfg e -> this.label -> exit

cfg Skip() = entry -> exit

cfg Seq(s1,s2) = entry -> cfg s1 -> cfg s2 -> exit

cfg IfThenElse(c, t, e) =
  entry -> c.label -> cfg t -> exit, 
           c.label -> cfg e -> exit

cfg While(e, s) =
  entry -> e.label -> cfg s -> e.label -> exit

prop Definition = MaySet (name * Option Term)

Definition this@Assign(n, e) = Set.plus (n, Some this.label) defs
for pred.label -> this.label
where defs = Set.filter (Definition pred)
               (\(nm, _). n == nm)

Definition this = Definitions defs
for pred.label -> this.label

Definition this = Set.map reads (\n. (n, None))
for entry -> this.label
where reads = Live this

prop UsesDef = Set Term

UsesDef this@Ref(n) = d
where Set.filter (Definition this) (\(nm, opt).
  if n == m
    then opt != None
    else false)

// property rules
// 
//   e@Ref(x) has a UsesDef d
//   where e has a Definition (x, Some(d)).