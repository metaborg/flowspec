module flow

properties

  Value Value

flow graph rules

  Root(s):
    entry has successor s,
    s has successor exit.

  Assign(x, e):
    entry has successor e,
    e has successor x,
    x has successor exit.

  Skip().

  Seq(s1, s2):
    entry has successor s1,
    s1 has successor s2,
    s2 has successor exit.

  IfThenElse(e, s1, s2):
    entry has successor e,
    e has successor s1 where e has Value True(),
    e has successor s2 where e has Value False(),
    s1 has successor exit,
    s2 has successor exit.

  While(e, s):
    entry has successor e,
    e has successor s where e has Value True(),
    s has successor e,
    e has successor exit where e has Value False().

  Ref(_), Num(_), True(), False().

  Add(e1, e2), Sub(e1, e2), Mul(e1, e2), Or(e1, e2), And(e1, e2),
  Eq(e1, e2), Gt(e1, e2), Gte(e1, e2), Lt(e1, e2), Lte(e1, e2):
    e1 has successor e2.

  Not(e):
    entry has successor e,
    e has successor exit.

properties

  Write name
  Read name
  ProgramStart Term // Should be unit
  Expr Term

property rules

  term has Write n
  where term has child c,
        c has Write n.

  term has Read n
  where term has child c,
        c has Read n.

  Assign(x, e) has Write x.

  Ref(n) has Read n.

  Add(e1, e2), Sub(e1, e2), Mul(e1, e2), Or(e1, e2), And(e1, e2),
  Eq(e1, e2), Gt(e1, e2), Gte(e1, e2), Lt(e1, e2), Lte(e1, e2) has Expr this.
  
  Root(_) has ProgramStart this.

properties

  Definition name -> origin?*

property rules

//  term has Definition x -> None
//    where term has ProgramStart term,
//          term has Write x,
//          not term has Read x.

//  term has Definition x -> None
//    where term has ProgramStart term,
//          term has Read x,
//          not term has Write x.

  st has Definition x -> this // Some(this)
  where st has Write x.

  st has Definition x -> o // Some(o)
  where not st has Write x,
        st2 has successor st,
        st2 has Definition x -> o. // Some(o)

// Can we find a way to add this back in?
//  Ref(x) uses Definition x // enough to build reverse relation, which is the LiveVariables analysis