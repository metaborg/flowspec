module flow

cfg Root(s) = entry -> cfg s -> exit

cfg this@Assign(n, e) =
  entry -> cfg e -> this -> exit

cfg Skip() = entry -> exit

cfg Seq(s1,s2) = entry -> cfg s1 -> cfg s2 -> exit

cfg IfThenElse(c, t, e) =
  entry -> c -> cfg t -> exit, 
           c -> cfg e -> exit

cfg While(e, s) =
  entry -> e -> cfg s -> e -> exit

prop definition: MaySet (name * Option term)

definition(prev -> this@Assign(n, e)) =
  { (n, Some(this)) } \/
  { (m, l) | (m, l) <- definition(pred), m != n }

definition(prev -> _) = definition(prev)

definition(start) = { (n, None()) | n <- live(start) }

prop usesDef: Set term

usesDef(this@Ref(n)) =
  { (nm, opt) | (nm, opt) <- definition(this), if n == m then opt != None() else false }

// property rules
// 
//   e@Ref(x) has a UsesDef d
//   where e has a Definition (x, Some(d)).