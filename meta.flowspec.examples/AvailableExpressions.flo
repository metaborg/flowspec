module AvailableExpressions

cfg root Root(s) = start -> cfg s -> end

cfg this@Assign(n, e) =
  entry -> cfg e -> this -> exit

cfg Skip() = entry -> exit

cfg Seq(s1,s2) = entry -> cfg s1 -> cfg s2 -> exit

cfg IfThenElse(c, t, e) =
  entry -> c -> cfg t -> exit,
           c -> cfg e -> exit

cfg While(e, s) =
  entry -> e -> cfg s -> e -> exit

prop read: Set(name)

read(this@BinOp(l,_,r)) = read(l) \/ read(r)
read(this@UnOp(_,e)) = read(e)
read(Ref(n)) = {n}
read(Literal(_)) = {}

prop available: MustSet term

available(prev -> Assign(n, e)) =
  { expr |
    expr <- available(prev) \/ {e},
    !(n in reads(expr)) }

available(prev -> _) = available(prev)