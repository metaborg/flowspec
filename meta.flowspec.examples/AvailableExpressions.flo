module AvailableExpressions

cfg Root(s) = entry -> cfg s -> exit

cfg this@Assign(n, e) =
  entry -> cfg e -> this -> exit

cfg Skip() = entry -> exit

cfg Seq(s1,s2) = entry -> cfg s1 -> cfg s2 -> exit

cfg IfThenElse(c, t, e) =
  entry -> c -> cfg t -> exit, 
           c -> cfg e -> exit

cfg While(e, s) =
  entry -> e -> cfg s -> e -> exit

prop Reads = Set name

Reads Ref(n) = Set.new n

Reads BinOp(l, _, r) =
  Set.union (Reads l) (Reads r)

prop Available = MustSet term

Available Assign(n, e) <- pred = exprs3
where exprs = Set.plus (Available pred) e
      result = Set.filter exprs
        (\expr. Set.contains n (Reads expr))

Available this <- pred = Available pred
