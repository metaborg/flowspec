module AvailableExpressions

cfg root Root(s) = start -> cfg s -> end

cfg this@Assign(n, e) =
  entry -> cfg e -> this -> exit

cfg Skip() = entry -> exit

cfg Seq(s1,s2) = entry -> cfg s1 -> cfg s2 -> exit

cfg IfThenElse(c, t, e) =
  entry -> c -> cfg t -> exit,
           c -> cfg e -> exit

cfg While(e, s) =
  entry -> e -> cfg s -> e -> exit

external prop reads: Set(name)

prop available: MustSet(term)

available(prev -> Assign(n, e)) =
  { expr |
    expr <- available(prev) \/ {e},
    !(Var{n} in reads(e)) }

available(prev -> _) = available(prev)