module desugar

imports

signatures/flowspec/-
signatures/flowspec/desugar/-
libspoofax/term/origin
libspoofax/stratego/debug

rules

thread-map_(s): ([], t) -> ([], t)
thread-map_(s): ([x | xs], t) -> ([y' | ys], t'')
where <s> (x, t) => (y, t')
    ; <thread-map_(s)> (xs, t') => (ys, t'')
    ; y' := <origin-track-forced(!y)> x

rules

desugar-all = topdown(try(desugar-one))
//;remove-object-sharing-in-strings;warning-on-missing-origin

desugar-one = origin-track-forced(desugar-setcomp + desugar-setcompmatcharm)

desugar-in-list(s): subj@[_|_] -> <origin-track-forced(!obj)> subj
where if map(not(s))
        then fail
        else mapconcat(origin-track-forced(s <+ ![<id>]))
      end//if
    ; ?obj

rules // check AST whether every sub term has an origin

warning-on-missing-origin: term -> <id>
//with terms-missing-origin
//   ; remove-all(?[])
//   ; map(debug(|"[WARNING] Term missing origin: "))

terms-missing-origin = collect-all(not(origin-offset))

warning-on-origin-loss(s|str): original -> <s> original
where transformed := <s> original
    ; if <(origin-offset, not(origin-offset))> (original, transformed)
        then <debug(|${[WARNING] Origin just lost in {str}:{" "}})> transformed
      end//if

remove-object-sharing-in-strings =
  topdown(try(is-string;origin-track-forced(explode-string;implode-string)))

rules // FlowSpec specific

desugar-setcomp: SetComp(expr, exprs) -> SetComp(expr, sourcepatterns, sources', exprs')
with (sources, exprs') := <partition(?Source(_, _))> exprs
   ; (sourcepatterns, sources') := <unzip(\Source(a,b) -> (a,b)\)> sources

desugar-setcompmatcharm: MatchArm(pattern) -> pattern
