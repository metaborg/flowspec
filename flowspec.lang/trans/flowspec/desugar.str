module desugar

imports

signatures/flowspec/-
signatures/flowspec/desugar/-
libspoofax/term/origin
libspoofax/stratego/debug

rules

thread-map_(s): ([], t) -> ([], t)
thread-map_(s): ([x | xs], t) -> ([y' | ys], t'')
where <s> (x, t) => (y, t')
    ; <thread-map_(s)> (xs, t') => (ys, t'')
    ; y' := <origin-track-forced(!y)> x

rules

post-desugar-all = topdown(try(post-desugar-one))

post-desugar-one = origin-track-forced(desugar-setcomp + desugar-setcompmatcharm)

pre-desugar-all = topdown(try(pre-desugar-all))
pre-desugar-one = origin-track-forced(desugar-chain + desugar-cfgrule)

desugar-in-list(s): subj@[_|_] -> <origin-track-forced(!obj)> subj
where if map(not(s))
        then fail
        else mapconcat(origin-track-forced(s <+ ![<id>]))
      end//if
    ; ?obj

rules // FlowSpec specific

desugar-setcomp: SetComp(expr, exprs) -> SetComp(expr, sourcepatterns, sources', exprs')
with (sources, exprs') := <partition(?Source(_, _))> exprs
   ; (sourcepatterns, sources') := <unzip(\Source(a,b) -> (a,b)\)> sources

desugar-setcompmatcharm: MatchArm(pattern) -> pattern

desugar-chain: Chain(head, tail) -> Chain([head | tail])

desugar-cfgrule: CFGRule(root, pattern) -> CFGRule(root, pattern, [])
