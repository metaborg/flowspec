module generate-transfers

imports

signatures/flowspec/-
signatures/flowspec/desugar/-
signatures/flowspec/runtime/IR-sig
flowspec/static-semantics/signatures

libspoofax/stratego/debug
libspoofax/core/language

flowspec/desugar
flowspec/utils
flowspec/dependencies
flowspec/generate-stratego

nabl2/api
nabl2/shared/-
nabl2/runtime/-
flowspec/static-semantics

rules

gen-tf: m@Module(_, _, def*) -> transfer-functions
with
  a := <nabl2-get-ast-analysis>
; proprule* := <retain-all(?PropRule(_, _, _, _))> def*
; propnames := <retain-all(\PropDef(name, ty) -> (<nabl2-mk-occurrence(|"Property")> name, ty)\)> def*
; numberedrules := <number-prop-rules(|a, <map(Fst)> propnames)> proprule*
; transfer-functions := <map(gen-tf(|a)); bundle-tfs(|a, propnames)> numberedrules

gen-tf(|a): (n, PropRule(name, pattern, body, wherecl)) ->
  (name', n, TransferFunction(vars, Where(body', binding*)))
where id
; dirvar := <dir-var> pattern
with id
; pvar* := <pattern-in-dir;pattern-vars(|"")> pattern
; vars := <wildcards-to-numbered-vars> [dirvar | pvar*]
; binding* := <where-clause-bindings> wherecl
; body' := <topdown(try(identify-ExtProp(|a)))> body
; name' := <nabl2-mk-occurrence(|"Property"); nabl2-get-resolved-name(|a); Fst> name

gen-tf(|a): (n, PropRule(name, pattern, body, wherecl)) ->
  (name', n, InitFunction(vars, Where(body', binding*)))
where not(<dir-var> pattern)
with id
; pvar* := <pattern-in-dir;pattern-vars(|"")> pattern
; vars := <wildcards-to-numbered-vars> pvar*
; binding* := <where-clause-bindings> wherecl
; body' := <topdown(try(identify-ExtProp(|a)))> body
; name' := <nabl2-mk-occurrence(|"Property"); nabl2-get-resolved-name(|a); Fst> name

dir-var: Forward(v, _) -> v
dir-var: Backward(_, v) -> v

where-clause-bindings: NoWhereClause() -> []
where-clause-bindings: WhereClause(l) -> l

wildcards-to-numbered-vars: vars -> vars'
with vars' := <thread-map(try(\(Wildcard(), c) -> ($[wld_[c]], <inc> c)\));Fst> (vars, 0)

bundle-tfs(|a, propnames): list -> result'
with
  namesmap := <retain-all(bundle-tfs-helper3(|a))> propnames
; result := <thread-map(bundle-tfs-helper1); Snd> (list, namesmap)
; result' := <map((nabl2-get-occurrence-name, id))> result

// TODO: use a fold above, not a thread-map;Snd with return here of ((), thing_to_fold)
bundle-tfs-helper1: ((nm, n, tf), map) -> ((), map')
with
  map' := <map(try((?nm, (id, id, ![(n,tf)|<id>]))))> map

bundle-tfs-helper3(|a): (n, ty) -> (n, (ty, d, []))
where
  d := <nabl2-get-property(|a, "direction")> n

identify-ExtProp(|a): Prop(name, var) -> ExtProp(name, var)
with
  (decl, _) := <nabl2-mk-occurrence(|"Property"); nabl2-get-resolved-name(|a)> name
where
  External() := <nabl2-get-property(|a,"kind")> decl
