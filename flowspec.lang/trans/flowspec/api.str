module flowspec/api

imports

flowspec/editor-hover
flowspec/utils
flowspec/primitives
flowspec/menus
signatures/flowspec/runtime/-

nabl2/api
libspoofax/stratego/debug

strategies

flowspec-editor-hover(language-pp) = flowspec--editor-hover(language-pp)

/**
 * Get the property of the control flow graph node associated with
 * the given term. The value returned is the value of the property
 * _before_ the effect of the control flow graph node. 
 *
 * @param a : Analysis
 * @param prop : String
 * @type term:Term -> Term
 */
flowspec-get-property-pre(|a, propname) = flowspec--get-property-pre(|a, propname)

/**
 * Get the property of the control flow graph node associated with
 * the given term. The value returned is the value of the property
 * _after_ the effect of the control flow graph node. 
 *
 * @param a : Analysis
 * @param prop : String
 * @type term:Term -> Term
 */
flowspec-get-property-post(|a, propname) = flowspec--get-property-post(|a, propname)

/**
 * Analyze the given AST with NaBL2 and FlowSpec.
 *
 * @param resource:String
 * @type ast:Term -> (ast:Term, Analysis, errors:List(EditorMessage), warnings:List(EditorMessage), notes:List(EditorMessage))
 */
flowspec-analyze-ast(|resource): ast -> (ast', analysis', errors, warnings, notes)
where (ast', analysis, errors, warnings, notes) := <nabl2-analyze-ast(|resource)> ast
    ; analysis' := <flowspec--solve(|analysis)> ast'

/**
 * Get the control flow graph node associated with the given term. 
 *
 * @param a : Analysis
 * @type term:Term -> CFGNode
 */
flowspec-get-cfg-node(|a) = flowspec--get-cfg-node(|a, Normal())

/**
 * Get the control flow graph start node associated with the given term.
 *
 * @param a : Analysis
 * @type term:Term -> CFGNode
 */
flowspec-get-cfg-start-node(|a) = flowspec--get-cfg-node(|a, Start())

/**
 * Get the control flow graph start node associated with the given term.
 *
 * @param a : Analysis
 * @type term:Term -> CFGNode
 */
flowspec-get-cfg-end-node(|a) = flowspec--get-cfg-node(|a, End())

/**
 * Get the control flow graph start node associated with the given term.
 *
 * @param a : Analysis
 * @type term:Term -> CFGNode
 */
flowspec-get-cfg-entry-node(|a) = flowspec--get-cfg-node(|a, Entry())

/**
 * Get the control flow graph start node associated with the given term.
 *
 * @param a : Analysis
 * @type term:Term -> CFGNode
 */
flowspec-get-cfg-exit-node(|a) = flowspec--get-cfg-node(|a, Exit())

/**
 * Get the control flow graph start node associated with the given term. 
 *
 * @param a : Analysis
 * @type term:Term -> CFGNode
 */
flowspec-get-cfg-prev-nodes(|a) = flowspec--get-cfg-prev-nodes(|a)

/**
 * Get the control flow graph start node associated with the given term. 
 *
 * @param a : Analysis
 * @type term:Term -> CFGNode
 */
flowspec-get-cfg-next-nodes(|a) = flowspec--get-cfg-next-nodes(|a)

/**
 * Find AST node corresponding to the CFGNode back again
 *
 * @param ast : Term
 * @type node:CFGNode -> Term
 */
flowspec-cfg-node-ast(|ast): CFGNode(pos, _, _) ->
  <collect-one(where(flowspec-get-position;?pos))> ast

/**
 * Find AST node corresponding to the CFGNode back again
 *
 * @param ast : Term
 * @type pos:Position -> Term
 */
flowspec-pos-ast(|ast): pos ->
  <collect-one(where(flowspec-get-position;?pos))> ast

/**
 * Find parent of AST node corresponding to the CFGNode back again
 *
 * @param parent : Term -> Term
 * @param ast : Term
 * @type node:CFGNode -> Term
 */
flowspec-cfg-node-ast(parent|ast): CFGNode(pos, _, _) ->
  <collect-one(where(parent;flowspec-get-position;?pos))> ast

/**
 * Find parent of AST node corresponding to the CFGNode back again
 *
 * @param parent : Term -> Term
 * @param ast : Term
 * @type pos:Position -> Term
 */
flowspec-pos-ast(parent|ast): pos ->
  <collect-one(where(parent;flowspec-get-position;?pos))> ast

flowspec-get-position = nabl2-get-ast-index

strategies // The following are used/extended by generated code

flowspec--prop-names = fail

flowspec--constraint-list-to-cconj(index) = constraint-list-to-cconj(index)

flowspec--cfg-node(|index,kind): n -> CFGNode(index, n, kind)