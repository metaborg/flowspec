module flowspec/Type

imports

flowspec/Common
flowspec/Pattern
flowspec/Expr

context-free syntax // Type definitions

TypeDef.TypeDef =
[type [TypeName]([{Var ", "}*]) =
  [{ConsDef "\n"}+]]

ConsDef.ConsDef = [| [ConsName]([{TypeOrVar ", "}*])]

TypeOrVar = Type
TypeOrVar.Var = Var

context-free syntax // Lattice definitions

LatticeDef.LatticeDef =
[lattice [TypeName]([{Var ", "}*]) where
  [LatticePart+]]

AltLatticeDef.LatticeDef =
[[TypeName]([{Var ", "}*]) where
  [LatticePart+]]

LatticePart.Type = [type = [Type]]
LatticePart.Lub = [lub([Var], [Var]) = [Expr]]
LatticePart.Glb = [glb([Var], [Var]) = [Expr]]
LatticePart.Leq = [leq([Var], [Var]) = [Expr]]
LatticePart.Geq = [geq([Var], [Var]) = [Expr]]
LatticePart.NLeq = [nleq([Var], [Var]) = [Expr]]
LatticePart.Top = [top = [Expr]]
LatticePart.Bottom = [bottom = [Expr]]

context-free syntax // Type expressions

Type = SimpleType
SimpleType.Name = "name"
SimpleType.Term = "term"
SimpleType.Index = "occurrence"
SimpleType.Int = "int"
SimpleType.String = "string"
SimpleType.UserType = [[TypeName]([{Type ", "}*])] {avoid}
Type = [([Type])] {bracket}
Type.Tuple = [[Type] * [Type]] {right}
Type.Map = [Map([Type], [Type])]
Type.Set = [Set([Type])]

context-free priorities

{ Type.Set Type.Map SimpleType.UserType } > Type.Tuple