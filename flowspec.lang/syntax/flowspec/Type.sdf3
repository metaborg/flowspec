module flowspec/Type

imports

flowspec/Common
flowspec/Pattern
flowspec/Expr

context-free syntax // Type definitions

TypeDef.TypeDef =
[[TypeName]([{Var ", "}+]) =
  [{ConsDef "\n"}+]]

TypeDef.TypeDef =
[[TypeName] =
  [{ConsDef "\n"}+]]

ConsDef.ConsDef = [| [ConsName]([{TypeOrVar ", "}*])]

TypeOrVar = Type {prefer}
TypeOrVar.Var = Var

context-free syntax // Lattice definitions

// TODO: no need for the Var*?
LatticeDef.LatticeDef =
[[TypeName] where
  [LatticePart+]]

LatticeDef.LatticeDef =
[[TypeName]([{Var ", "}+]) where
  [LatticePart+]]

LatticePart.Type = [type = [Type]]
LatticePart.Lub = [lub([Var], [Var]) = [Expr]]
LatticePart.Glb = [glb([Var], [Var]) = [Expr]]
LatticePart.Leq = [leq([Var], [Var]) = [Expr]]
LatticePart.Geq = [geq([Var], [Var]) = [Expr]]
LatticePart.NLeq = [nleq([Var], [Var]) = [Expr]]
LatticePart.Top = [top = [Expr]]
LatticePart.Bottom = [bottom = [Expr]]

context-free syntax // Type expressions

Type = SimpleType
SimpleType.Name = "name"
SimpleType.Term = "term"
SimpleType.Index = "position"
SimpleType.Int = "int"
SimpleType.String = "string"
SimpleType.Float = "float"
SimpleType.Bool = "bool"
Type.UserType = [[TypeName]] {avoid}
Type.UserType = [[TypeName]([{Type ", "}+])] {avoid}
Type = [([Type])] {bracket}
Type.Tuple = [[Type] * [Type]] {right}
Type.Map = [Map([Type], [Type])]
Type.Set = [Set([Type])]

context-free priorities

{ Type.Set Type.Map Type.UserType } > Type.Tuple