module flowspec/Expr

imports

flowspec/Common
flowspec/Pattern
nabl2/shared/common/Names
nabl2/shared/common/ScopeGraph

template options
tokenize: "("

context-free syntax // expressions

Expr.Term = [[ConsName]([{Expr ","}*])]
Expr = ExprRef
Expr.PropOrAppl = [[PropName]([Var])] {prefer}
Expr.Tuple = [([Expr], [{Expr ", "}+])]
Expr = Literal
Expr.Start = [start]
Expr.End = [end]
// TODO: add ADT application

Expr = [([Expr])] {bracket}
Expr.Type = [[Var].type]
Expr.Appl = [[FunRef]([{Expr ", "}+])] {left}
Expr.If = [if [Expr] then [Expr] else [Expr]]

Expr.Eq = [[Expr] == [Expr]] {left}
Expr.NEq = [[Expr] != [Expr]] {left}
Expr.And = [[Expr] && [Expr]] {left}
Expr.Or = [[Expr] || [Expr]] {left}
Expr.Not = [![Expr]]

Expr.Lt  = [[Expr] < [Expr]] {left}
Expr.Lte = [[Expr] <= [Expr]] {left}
Expr.Gt  = [[Expr] > [Expr]] {left}
Expr.Gte = [[Expr] >= [Expr]] {left}

Expr.Add = [[Expr] + [Expr]] {left}
Expr.Sub = [[Expr] - [Expr]] {left}
Expr.Mul = [[Expr] * [Expr]] {left}
Expr.Div = [[Expr] / [Expr]] {left}
Expr.Mod = [[Expr] % [Expr]] {left}
Expr.Neg = [- [Expr]] {left}

Expr.Match = [match [Expr] with [MatchArm+]] {longest-match}

Expr.SetLiteral = [{ [{Expr ","}+] }]
Expr.SetComp = [{ [Expr] | [{SetCompExpr ", "}+] }]
Expr.MapLiteral = [{ [{MapBinding ","}+] }]
Expr.MapComp = [{ [MapBinding] | [{MapCompExpr ", "}+] }]
Expr.MapLookup = <<Expr>[<Expr>]>
Expr.EmptySetOrMapLiteral = [{ }] {prefer}
SetCompExpr = SetCompSource {prefer}
SetCompExpr = CompPredicate
MapCompExpr = MapCompSource {prefer}
MapCompExpr = CompPredicate
CompPredicate.Predicate = Expr
CompPredicate.MatchPredicate = [match [Expr] with [SetCompMatchArm+]] {longest-match}
SetCompSource.SetSource = [[Pattern] <- [Expr]]
MapCompSource.MapSource = [([Pattern] |-> [Pattern]) <- [Expr]]
MapBinding.MapBinding = [[Expr] |-> [Expr]]

Expr.TermIndex = [occurrence([Var])]
Expr.NaBL2Occurrence = NaBL2-Occurrence {avoid}
NaBL2-CTerm.Ref = Var
NaBL2-OccurrenceIndex.FSNoIndex = []

Expr.SetUnion = [[Expr] \/ [Expr]] {left}
Expr.SetDifference = [[Expr] \ [Expr]] {left}
Expr.SetContains = [[Expr] in [Expr]] {left}
Expr.SetIntersection = [[Expr] /\ [Expr]] {left}

MatchArm.MatchArm = [| [Pattern] => [Expr]]
SetCompMatchArm.MatchArm = [| [Pattern]]

Literal.Int = INT
Literal.String = STRING
Literal.True = [true]
Literal.False = [false]

Ref.QualRef = [[ModuleName].[Var]] {avoid}
Ref.Ref = Var

ExprRef = Ref
ExprRef.TopOf = [[TypeName].top]
ExprRef.BottomOf = [[TypeName].bottom]

FunRef.LubOf = [[TypeName].lub]
FunRef.GlbOf = [[TypeName].glb]
FunRef.LeqOf = [[TypeName].leq]
FunRef.GeqOf = [[TypeName].geq]
FunRef.NLeqOf = [[TypeName].nleq]
FunRef = Ref

context-free priorities
  Expr.Not > { left: Expr.Appl Expr.If Expr.Match } > { non-assoc: Expr.SetUnion Expr.SetIntersection Expr.SetContains Expr.SetDifference } > { left: Expr.Eq Expr.NEq } > Expr.And > Expr.Or