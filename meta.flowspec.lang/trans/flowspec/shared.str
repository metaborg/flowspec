module flowspec/shared

imports

signatures/flowspec/-
flowspec/utils
flowspec/solver
libspoofax/stratego/debug
nabl2/shared/-

strategies

flowspec--provide-prop-deps = fail
flowspec--provide-prop-dirs = fail
flowspec--provide-prop-types = fail

flowspec--generate-cfg =
  flowspec--generate-cfg-rule
  <+ (debug(|"[WARNING] CFG Rule missing for this constructor: ");![])

flowspec--generate-cfg-rule = fail

flowspec--generate-transfer = collect-all(flowspec--generate-transfer-rule)

flowspec--generate-transfer-rule = fail

rules

flowspec--solver-input: node -> (types, dirs, deps, cfg, trans)
where types := <flowspec--provide-prop-types> node
    ; dirs  := <flowspec--provide-prop-dirs> node
    ; deps  := <flowspec--provide-prop-deps> node
    ; cfg  := <flowspec--generate-cfg> node
    ; trans  := <flowspec--generate-transfer> node

flowspec--solve = flowspec--solver-input;flowspec-solver

flowspec--remove-virtual-cfg-nodes: [] -> []
flowspec--remove-virtual-cfg-nodes: pairs@[_|_] -> result
with
  virtual-nodes := <unzip;conc;retain-all(?Exit(_) + ?Entry(_));nub> pairs
; result := <thread-map(flowspec-rm-vn);Snd> (virtual-nodes, pairs)

flowspec-rm-vn: (vn, pairs) -> (vn, result)
with
  froms := <retain-all(?(<id>, vn))> pairs
; tos := <retain-all(?(vn, <id>))> pairs
; result := <conc> (<cart(id)> (froms, tos), <remove-all(?(vn, _) + ?(_, vn))> pairs)
