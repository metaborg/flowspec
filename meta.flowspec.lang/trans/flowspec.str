module flowspec

imports

  completion/completion
  pp
  flowspec/outline
  flowspec/analysis
  flowspec/desugar
  flowspec/generate-stratego
  flowspec/generate-transfers
  signatures/flowspec/Main-sig

rules // Debugging

  debug-show-parsed:
    (node, _, _, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path
    ; result   := node

  debug-show-desugared:
    (node, _, _, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"desugared.aterm")> path
    ; result   := <desugar-all> node

  generate-stratego: 
    (node@Module(name, _, _, _), _, _, path, project-path) -> (filename, result)
    with
      filename := <src-gen-file(|project-path, "flowspec", ".str")> name
    ; result   := <gen-str> node

  generate-transfers: 
    (node, _, _, path, project-path) -> (filename, result)
    with
      filename := <target-file(|project-path, ".aterm")> "transfer-functions"
    ; result   := <gen-tf> node

  generate-all =
    where(generate-stratego;write-string-to-file)
  ; where(generate-transfers;write-string-to-file)
  ; !()

// Copied from https://github.com/metaborg/nabl/blob/6f5630aef0179163e7c8eb29db9901586d064f78/org.metaborg.meta.nabl2.lang/trans/nabl2/lang/util/misc.str#L9-L14
  src-gen-file(|project-path, sub-dir, ext): name -> file-name
  with src-gen-dir := <src-gen-dir(|project-path, sub-dir)>;
       file-name := $[[src-gen-dir]/[name][ext]]

  src-gen-dir(|project-path, sub-dir): _ -> dir
  with dir := $[[project-path]/src-gen/[sub-dir]]

  target-file(|project-path, ext): name -> file-name
  with target-dir := <target-dir(|project-path)>;
       file-name := $[[target-dir]/[name][ext]]

  target-dir(|project-path): _ -> dir
  with dir := $[[project-path]/target/metaborg]

// Copied from https://github.com/metaborg/sdf/blob/50018c3843b4717bd7baa7b16ae49781d91a3ce4/org.metaborg.meta.lang.template/trans/editor/build-utils.str#L55-L64
  // When given a tuple (path, string) this writes string into path.
  write-string-to-file =
    ?(filename, string);
    if <dirname; readdir> filename then
      with(
        handle := <fopen> (filename, "w");
        <fputs> (string, handle);
        <fclose> handle
      )
    end
