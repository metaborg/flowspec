module Property

imports

  Common
  Pattern

context-free syntax // Properties

  Property.Def = [[PropName] [PropType] ([PropDir], [PropKind])]
  Property.DefForward = [[PropName] [PropType] ([PropKind])]
  Property.DefMay = [[PropName] [PropType] ([PropDir])]
  Property.DefForwardMay = [[PropName] [PropType]]
  
  PropType = PropTypeSimple
  PropType.Map = [[PropTypeDomain] -> [PropTypeRange]]
  
  PropTypeDomain.Name = [name]
  PropTypeDomain.Origin = [origin]
  PropTypeDomain.Sort = SortName
  
  PropTypeSimple.NameSet = [name]
  PropTypeSimple.OriginSet = [origin]
  PropTypeSimple.SortSet = SortName
  // TODO: add tuples
//  PropTypeSimple.Tuple = [[{PropTypeSimple "*"}+]]
//  PropTypeSimple = [([PropTypeSimple])] {bracket}

  PropTypeRange = PropTypeSimple
  PropTypeRange.NonSet = [[PropTypeDomain]?]
  
  PropDir.Forward  = [forward] // only these first two need may/must right?
  PropDir.Backward = [backward]
  PropDir.Upward  = [upward]
  PropDir.Downward = [downward]
  PropKind.Must = [strict]
  PropKind.May  = [loose]

context-free syntax // Property Rules

  PropRule.PropRule = [[{TLPattern ", "}+]: [PropRuleBody].]
  PropRule.PropRuleWhere =
[[{TLPattern ", "}+]: [PropRuleBody]
  where [PropWhereClause].]
  
  PropRuleBody.PropRef = [[PropName] [VarRef]]
  PropRuleBody.MapPropRef = [[PropName] [VarRef] -> [VarRef]]
  
  PropWhereClause.And = [[PropWhereClause], [PropWhereClause]] {right}
  PropWhereClause.CFGArrow = [[TLPattern] -> [TLPattern]]
  PropWhereClause = HasPropExpr
  PropWhereClause.Not = [not [PropBooleanExpr]]
  PropWhereClause.True = [true]
  
  HasPropExpr.HasProp = [[ID]: [PropName] [VarRef]]
  HasPropExpr.HasMapProp = [[ID]: [PropName] [VarRef] -> [VarRef]]
  
  PropBooleanExpr = [([PropBooleanExpr])] {bracket}
  PropBooleanExpr.And = [[PropBooleanExpr], [PropBooleanExpr]] {right}
  PropBooleanExpr = HasPropExpr
  
  VarRef.VarRef = ID {avoid}
  VarRef.This = [this]

template options

  keyword -/- [A-Za-z\-]
