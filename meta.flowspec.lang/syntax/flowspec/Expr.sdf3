module flowspec/Expr

imports

flowspec/Common
flowspec/Pattern

context-free syntax // expressions

Expr.Term = [[ConsName]([{Expr ","}*])]
Expr.QualRef = [[ModuleName].[Var]] {avoid}
Expr.Ref = Var
Expr.PropRef = PropName
Expr.Tuple = [([Expr], [{Expr ", "}+])]
Expr = Literal
// TODO: add ADT application

Expr = [([Expr])] {bracket}
Expr.Type = [[Var].type]
Expr.Abs = [\[FunPattern]. [Expr]]
Expr.Appl = [[Expr] [Expr]] {left}
Expr.If = [if [Expr] then [Expr] else [Expr]]
Expr.Eq = [[Expr] == [Expr]] {non-assoc}
Expr.NEq = [[Expr] != [Expr]] {non-assoc}
Expr.Match = [match [Expr] with [MatchArm+]] {longest-match}

MatchArm.MatchArm = [| [FunPattern] => [Expr]]

Literal.Int = INT
Literal.String = STRING

context-free priorities
  { Expr.Appl Expr.If Expr.Match } > Expr.Abs > Expr.Eq