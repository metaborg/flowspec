module flowspec/Common

lexical syntax

ID             = [a-zA-Z] [a-zA-Z0-9]*
INT            = "-"? [0-9]+
STRING         = "\"" StringChar* "\""
StringChar     = ~[\"\n]
StringChar     = "\\\""
StringChar     = BackSlashChar
BackSlashChar  = "\\"
LAYOUT         = [\ \t\n\r]
CommentChar    = [\*]
LAYOUT         = "/*" InsideComment* "*/"
InsideComment  = ~[\*]
InsideComment  = CommentChar
LAYOUT         = "//" ~[\n\r]* NewLineEOF
NewLineEOF     = [\n\r]
NewLineEOF     = EOF
EOF            =

ModuleID       = [a-zA-Z] [a-zA-Z0-9\-]*
ModuleName     = {ModuleID "/"}+
TypeName       = [A-Z] [a-zA-Z0-9]*
Var            = [a-z] [a-zA-Z0-9]*
SortName       = [A-Z] [a-zA-Z0-9]*
ConsName       = [A-Z] [a-zA-Z0-9]*
PropName       = [a-z] [a-zA-Z0-9]*

// Keyword removal
Var = "for" {reject}
Var = "if" {reject}
Var = "then" {reject}
Var = "else" {reject}
Var = "match" {reject}
Var = "with" {reject}
Var = "where" {reject}
Var = "entry" {reject}
Var = "exit" {reject}
Var = "start" {reject}
Var = "end" {reject}
Var = "name" {reject}
Var = "in" {reject}
PropName = "cfg" {reject}

lexical restrictions

// Ensure greedy matching for lexicals

CommentChar   -/- [\/]
INT           -/- [0-9]
ID            -/- [a-zA-Z0-9]

ModuleID      -/- [a-zA-Z0-9\-]
TypeName      -/- [a-zA-Z0-9]
Var           -/- [a-zA-Z0-9]
SortName      -/- [a-zA-Z0-9]
PropName      -/- [a-zA-Z0-9]
ConsName      -/- [a-zA-Z0-9]

// EOF may not be followed by any char

EOF           -/- ~[]

// Backslash chars in strings may not be followed by "

BackSlashChar -/- [\"]

context-free restrictions

// Ensure greedy matching for comments

LAYOUT? -/- [\ \t\n\r]
LAYOUT? -/- [\/].[\/]
LAYOUT? -/- [\/].[\*]

lexical syntax
