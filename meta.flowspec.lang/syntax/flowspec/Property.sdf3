module flowspec/Property

imports

  flowspec/Common
  flowspec/Pattern
  flowspec/Type
  flowspec/Expr

context-free syntax // Properties

  Property.Def = [[PropName] [Type]]

context-free syntax // Property Rules

  PropRule.PropRule = [[{TLRulePattern ", "}+] has [PropName] [FunExpr] [PropWhere].]
  PropRule.PropContribRule = [[{TLRulePattern ", "}+] has a [PropName] [PropExpr] [PropWhere].]
  
  // This is desugared later to not have the WhereClause wrapper and give True() if no
  //  clause is given.
  PropWhere.NoWhereClause =
  PropWhere.WhereClause = [where [PropWhereClause]]

  PropPattern = FunPattern
  PropPattern.Mapping = [[FunPattern] -> [FunPattern]]
  
  PropExpr = FunExpr
  PropExpr.Mapping = [[FunExpr] -> [FunExpr]]

  PropWhereClause.And = [[PropWhereClause], [PropWhereClause]] {right}
  PropWhereClause.BuiltinRelation = [[TLRulePattern] has a [BuiltinRelation] [TLRulePattern]]
  PropWhereClause = HasPropExpr
  PropWhereClause.Filter = [not [PropBooleanExpr]]
  PropWhereClause.True = [true]

//  PropWhereClauseDesugared.CFGArrow = [[TLRulePattern] has a successor [TLRulePattern]]
//  PropWhereClauseDesugared.ASTRelation = [[TLRulePattern] has a child [TLRulePattern]]

  HasPropExpr.HasProp = [[ID] has [PropName] [FunPattern]]
  HasPropExpr.HasPropContrib = [[ID] has a [PropName] [PropPattern]]

  PropBooleanExpr = [([PropBooleanExpr])] {bracket}
  PropBooleanExpr.And = [[PropBooleanExpr], [PropBooleanExpr]] {right}
  PropBooleanExpr = HasPropExpr

lexical syntax

  BuiltinRelation = "successor" // For the CFG
  BuiltinRelation = "child"     // For the AST

template options

  keyword -/- [A-Za-z\-]
